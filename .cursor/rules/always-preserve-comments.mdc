---
description: 
globs: 
alwaysApply: true
---
---
description:
globs:
alwaysApply: true
---
# Comment Preservation Rules

## Overview

Comments in the codebase are valuable documentation that should be preserved and enriched, not removed or replaced unless specifically marked as completed TODOs.

## Rules

### 1. Never Delete Existing Comments

```typescript
// ✅ CORRECT
/** Existing comment remains untouched */
function someFunction() {
  // Original implementation comment stays
  doSomething();
}

// ❌ INCORRECT
// Removing or replacing existing comments
function someFunction() {
  doSomething();
}
```

### 2. Only Enrich Existing Comments

Add information to existing comments by appending new details, not by replacing:

```typescript
// ✅ CORRECT
/**
 * Handles user authentication
 * Additional info: Also manages session tokens
 */
function authenticate() {}

// ❌ INCORRECT
/**
 * Manages session tokens
 */
function authenticate() {}
```

### 3. Add Source References with @see

Always include a `@see` reference in type definitions pointing to the source file it represents:

```typescript
// ✅ CORRECT
/**
 * Represents a Keystone Field instance within a List.
 * @see /lib/list/field.js - Base field implementation
 */
interface KeystoneField {
  // ...
}

/**
 * Options for configuring text fields.
 * @see /fields/types/text/TextType.js - Text field implementation
 */
interface KeystoneTextFieldOptions {
  // ...
}

// ❌ INCORRECT
/** Represents a Keystone Field instance within a List. */
interface KeystoneField {
  // ...
}
```

### 4. TODO Comments

The only exception to the preservation rule is for `@todo` comments that have been completed, that must be replaced by a corresponding `@done`:
```typescript
// ✅ CORRECT
// Before: @todo Implement password hashing
// After: @done Password hashing implemented using bcrypt

// ❌ INCORRECT
// Keeping outdated @todo comments
// @todo Implement password hashing (when it's already done)
```

When a TODO has known revisions or improvements needed:
1. Replace the original TODO with @done to maintain history
2. Include specific details about what needs to be improved
3. Reference any relevant issues or discussions that led to the new TODO

```typescript
// ✅ CORRECT
// Before: @todo Implement basic password hashing
// After: @done Basic password hashing implemented using bcrypt
// @todo Enhance password hashing with salt rounds and pepper for additional security

// ❌ INCORRECT
// Removing completed TODO without documenting next steps
// Before: @todo Implement basic password hashing
// After: Basic password hashing implemented using bcrypt
```

### 5. Documentation Comments

When adding new code, maintain the same documentation style as surrounding code:

```typescript
// ✅ CORRECT
/** Existing function with JSDoc */
function existingFunction() {}

/** New function follows same JSDoc style */
function newFunction() {}

// ❌ INCORRECT
/** Existing function with JSDoc */
function existingFunction() {}

// New function with different style
function newFunction() {}
```

### 6. Comment Context

Keep comments in their original context when moving or refactoring code:

```typescript
// ✅ CORRECT
// Original:
/** User validation rules */
const userRules = {};

// After refactor (comment moves with the code):
/** User validation rules */
class UserValidator {
  rules = {};
}

// ❌ INCORRECT
// Leaving comments behind or separating them from their context
```

## Benefits

- Preserves institutional knowledge
- Maintains code documentation history
- Ensures consistent documentation style
- Prevents loss of important context
- Makes codebase more maintainable
- Provides clear traceability to source implementations

## Exceptions

The only valid exceptions to these rules are:
1. Replacing completed `@todo` comments with `@done` comments
2. Correcting factually incorrect comments
3. Updating comments that reference renamed/moved code elements